/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s-learn/apiserver/pkg/apis/mycode/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyControllerLister helps list MyControllers.
type MyControllerLister interface {
	// List lists all MyControllers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MyController, err error)
	// MyControllers returns an object that can list and get MyControllers.
	MyControllers(namespace string) MyControllerNamespaceLister
	MyControllerListerExpansion
}

// myControllerLister implements the MyControllerLister interface.
type myControllerLister struct {
	indexer cache.Indexer
}

// NewMyControllerLister returns a new MyControllerLister.
func NewMyControllerLister(indexer cache.Indexer) MyControllerLister {
	return &myControllerLister{indexer: indexer}
}

// List lists all MyControllers in the indexer.
func (s *myControllerLister) List(selector labels.Selector) (ret []*v1alpha1.MyController, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyController))
	})
	return ret, err
}

// MyControllers returns an object that can list and get MyControllers.
func (s *myControllerLister) MyControllers(namespace string) MyControllerNamespaceLister {
	return myControllerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyControllerNamespaceLister helps list and get MyControllers.
type MyControllerNamespaceLister interface {
	// List lists all MyControllers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MyController, err error)
	// Get retrieves the MyController from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MyController, error)
	MyControllerNamespaceListerExpansion
}

// myControllerNamespaceLister implements the MyControllerNamespaceLister
// interface.
type myControllerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyControllers in the indexer for a given namespace.
func (s myControllerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MyController, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyController))
	})
	return ret, err
}

// Get retrieves the MyController from the indexer for a given namespace and name.
func (s myControllerNamespaceLister) Get(name string) (*v1alpha1.MyController, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mycontroller"), name)
	}
	return obj.(*v1alpha1.MyController), nil
}
